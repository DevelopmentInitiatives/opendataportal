<div class='large-12 columns'>


<div class="wizard">
    <a><span class="badge">1</span>  Add Name and Source of data</a>
    <a><span class="badge">2</span> Select Type of Data</a>
    <a><span class="badge">3</span> Select a time or space format</a>
    <a class='current'><span class="badge badge-inverse">4</span> Attach joined data to a Data series</a>
</div>
<br/>


    <div class='panel callout radius'>
    Congratulations on reaching this step! You are almost done.

    Please search for a data series this joined up dataset belongs to, alternatively, you can create a dataseries here and attach your joined up
    data to it.
    </div>

<%= form_for @joined_up_dataset, url: wizard_path do |f| %>
    <table>
        <thead>
          <tr>
            <th width='300'>Data Chosen in Step 2</th>
            <th width='600'>Data series name | Indicator</th>
          </tr>
        </thead>
        <tbody>
        <% @joined_up_dataset['data_extract']['header_definitions'].each do |hdef| %>
            <% if hdef['types_of_data'] == 'data_series' %>
              <% key = hdef['key'] %>
              <tr>
                <td><%= key %></td>
                <td>
                  <form>
                    <input id='<%=key%>' type='text' name='data_serie' placeholder='Start typing data serie name'/>
                    <input type='submit' id='<%= key %>-sub' value='submit'>
                    <script type='text/javascript'>
                      $(document).ready(function(){
                      var substringMatcher = function(strs) {
                        return function findMatches(q, cb) {
                          var matches, substringRegex;

                          // an array that will be populated with substring matches
                          matches = [];

                          // regex used to determine if a string contains the substring `q`
                          substrRegex = new RegExp(q, 'i');

                          // iterate through the pool of strings and for any string that
                          // contains the substring `q`, add it to the `matches` array
                          $.each(strs, function(i, str) {
                            if (substrRegex.test(str)) {
                              // the typeahead jQuery plugin expects suggestions to a
                              // JavaScript object, refer to typeahead docs for more info
                              matches.push({ value: str });
                            }
                          });

                          cb(matches);
                        };
                      };

                      // var dataseries = ['Audi', 'BMW', 'Bugatti', 'Ferrari', 'Ford', 'Lamborghini', 'Mercedes Benz', 'Porsche', 'Rolls-Royce', 'Volkswagen'];
                      // var dataseries = [<%= DataSerie.pluck :name %>];
                      var dataseries = [];

                      $.getJSON('<%= data_series_index_url + ".json" %>', function(data){
                        // c.log(data['data_series'])
                        $.each(data, function(key, val){
                          dataseries = val;
                          console.log(dataseries);
                          // dataseries.push(val);
                          $('#<%= key %>').typeahead({
                            hint: true,
                            highlight: true,
                            minLength: 1
                            },
                            {
                              name: 'states',
                              displayKey: 'value',
                              source: substringMatcher(dataseries)
                              // source: dataseries.ttAdapter()
                          });
                        });
                      });

                      // console.log(dataseries);

                      // $('#<%= key %>').typeahead({
                      //   hint: true,
                      //   highlight: true,
                      //   minLength: 1
                      // },
                      // {
                      //   name: 'states',
                      //   displayKey: 'value',
                      //   source: substringMatcher(dataseries)
                      //   // source: dataseries.ttAdapter()
                      // });
                    });
                    </script>

                  </form>
                </td>
              </tr>
            <% end %>
        <% end %>
    </tbody>
    </table>
    <p>
        Missing a data serie? | <a href="#" data-reveal-id="dataSeriesModal">Create one</a>
    </p>
    <hr>
    <div class='actions'>
        <%= f.submit "Submit", class: 'button success' %>
        or <%= link_to "Previous", previous_wizard_path %>
    </div>
<% end %>
</div>

<!-- form modal -->
<div id="dataSeriesModal" class="reveal-modal small" data-reveal>
  <h3>Create a New Dataseries</h3>
  <form class="custom">
      <fieldset>
          <input type="text" id="name" placeholder="Name">
          <input type="text" id="description" rows=3 placeholder="Description">
          <button type="submit" id="data-series" class="small button">Create</button>
      </fieldset>
  </form>
  <a class="close-reveal-modal">&#215;</a>
</div>
